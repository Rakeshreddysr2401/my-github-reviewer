from States.state import ReviewState
from utils.github_utils.create_comment import create_comment
from utils.logger import get_logger
from utils.path_utils import normalize_file_path
log = get_logger()


def format_comments_node(state: ReviewState) -> ReviewState:
    file = state.files[state.current_file_index]
    chunk = file.chunks[state.current_chunk_index]

    comments = []

    line_map = {
        change.line_number: change
        for change in chunk.changes
        if change.line_number is not None
    }
    log.debug(f"Changes in {file.to_file} For  Chunk Content {chunk.content}: ")
    # for line_num, change in sorted(line_map.items()):
        # log.debug(f"Line {line_num}: {change.content}")


    for ai_response in state.llm_response:
        try:
            line_number = int(ai_response["lineNumber"])

            if line_number not in line_map:
                log.warning(f"Line {line_number} which comment generated by ai not found in the diff so Ignoring...")
                continue

            change = line_map[line_number]

            if not change.content.startswith("+"):
                log.warning(f"Line {line_number} which ai commented is not an added line: {change.content} so Ignoring... ")
                continue

            path = normalize_file_path(file.to_file)
            comment = {
                "body": ai_response["reviewComment"],
                "path": path,
                "line": line_number,
            }

            log.debug(f"Created comment: {comment}")
            comments.append(comment)

        except (KeyError, TypeError, ValueError) as e:
            log.error(f"Error creating comment from AI response: {e}, Response: {ai_response}")
    log.debug(f"Created {len(comments)} valid comments")

    state.comments.extend(comments)

    state.current_chunk_index += 1

    return state



